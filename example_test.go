package genbase_test

import (
	"fmt"

	"github.com/favclip/genbase"
)

func Example() {
	p := &genbase.Parser{SkipSemanticsCheck: false}
	packageInfo, err := p.ParseStringSource("main.go", `
	package sample

	// Sample is sample!
	// +sample
	type Sample struct {
	  A string
	  B, C string
	}
	`)
	if err != nil {
		panic(err)
	}

	g := genbase.NewGenerator(packageInfo)
	g.AddImport("strings", "sg")
	g.AddImport(`"fmt"`, "")
	g.PrintHeader("sample", &[]string{})

	typeInfos := packageInfo.CollectTaggedTypeInfos("+sample")
	for _, typeInfo := range typeInfos {
		g.Printf("func (obj *%s) String() string {\n", typeInfo.Name())
		st, err := typeInfo.StructType()
		if err != nil {
			panic(err)
		}

		g.Printf("var ss []string\n")

		for _, fieldInfo := range st.FieldInfos() {
			for _, fieldName := range fieldInfo.Names {
				g.Printf("ss = append(ss, fmt.Sprintf(\"%s:%s\"))\n", fieldName.Name, "%v")
			}
		}

		g.Printf("return sg.Join(ss, \",\")\n")
		g.Printf("}\n")
	}

	generatedCode, err := g.Format()
	if err != nil {
		panic(err)
	}

	fmt.Println(string(generatedCode))
	// Output:
	// // Code generated by sample ; DO NOT EDIT
	//
	// package sample
	//
	// import (
	// 	"fmt"
	// 	sg "strings"
	// )
	//
	// func (obj *Sample) String() string {
	// 	var ss []string
	// 	ss = append(ss, fmt.Sprintf("A:%v"))
	// 	ss = append(ss, fmt.Sprintf("B:%v"))
	// 	ss = append(ss, fmt.Sprintf("C:%v"))
	// 	return sg.Join(ss, ",")
	// }
}
